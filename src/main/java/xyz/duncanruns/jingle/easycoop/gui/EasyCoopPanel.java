package xyz.duncanruns.jingle.easycoop.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import xyz.duncanruns.jingle.easycoop.EasyCoop;
import xyz.duncanruns.jingle.util.KeyboardUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Optional;


public class EasyCoopPanel {
    public JPanel mainPanel;
    private JButton startStopButton;
    private JButton copyIPButton;
    private JButton setMCPortButton;

    private boolean e4mcRunning = false;
    private String domain;

    public EasyCoopPanel() {
        startStopButton.addActionListener(e -> {
            startStopButton.setEnabled(false);
            if (!e4mcRunning) {
                EasyCoop.startE4mc();
            } else {
                EasyCoop.stopE4mc();
            }
        });
        copyIPButton.addActionListener(e -> {
            try {
                KeyboardUtil.copyToClipboard(domain);
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }
        });
        setMCPortButton.addActionListener(e -> {
            String errorMessage = "";
            while (true) {
                String input = Optional.ofNullable(JOptionPane.showInputDialog(this.mainPanel, errorMessage + "Enter your Minecraft server's port:", "e4mcbiat: change port", JOptionPane.PLAIN_MESSAGE, null, null, Integer.toString(EasyCoop.options.e4mcbiatPort))).map(Object::toString).orElse(null);
                if (input == null || input.trim().isEmpty()) return;
                try {
                    int port = Integer.parseInt(input.trim());
                    if (port >= 1 && port <= 65535) {
                        EasyCoop.setMCPort(port);
                        return;
                    } else {
                        errorMessage = "Port must be between 1 and 65535!\n";
                    }
                } catch (NumberFormatException ex) {
                    errorMessage = "Invalid number format. Please enter a valid port.\n";
                }
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 1, new Insets(5, 5, 5, 5), -1, -1));
        final JSeparator separator1 = new JSeparator();
        mainPanel.add(separator1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(0);
        label1.setText("e4mc (but it's a tool)");
        panel1.add(label1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startStopButton = new JButton();
        startStopButton.setText("Start");
        panel1.add(startStopButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        copyIPButton = new JButton();
        copyIPButton.setEnabled(false);
        copyIPButton.setText("Copy IP");
        panel1.add(copyIPButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        setMCPortButton = new JButton();
        setMCPortButton.setText("Set MC Port");
        panel1.add(setMCPortButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    public void onE4mcStarted(String domain) {
        this.e4mcRunning = true;
        this.domain = domain;
        copyIPButton.setEnabled(true);
        startStopButton.setEnabled(true);
        startStopButton.setText("Stop");
    }

    public void onE4mcStopped() {
        this.e4mcRunning = false;
        copyIPButton.setEnabled(false);
        startStopButton.setEnabled(true);
        startStopButton.setText("Start");
    }
}
